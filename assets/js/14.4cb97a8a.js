(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{336:function(e,t,n){"use strict";n.r(t);var c=n(33),a=Object(c.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[n("code",[e._v("effect")]),e._v(" 是响应式系统的核心，而响应式系统又是 "),n("code",[e._v("vue3")]),e._v(" 中的核心，所以从 "),n("code",[e._v("effect")]),e._v(" 开始讲起。")]),e._v(" "),n("p",[e._v("首先看下面 "),n("code",[e._v("effect")]),e._v(" 的传参，"),n("code",[e._v("fn")]),e._v(" 是回调函数，"),n("code",[e._v("options")]),e._v(" 是传入的参数。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export function effect<T = any>(\n  fn: () => T,\n  options: ReactiveEffectOptions = EMPTY_OBJ\n): ReactiveEffect<T> {\n  if (isEffect(fn)) {\n    fn = fn.raw\n  }\n  const effect = createReactiveEffect(fn, options)\n  if (!options.lazy) {\n    effect()\n  }\n  return effect\n}\n")])])]),n("p",[e._v("其中 "),n("code",[e._v("option")]),e._v(" 的参数如下，都是属于可选的。")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("参数")]),e._v(" "),n("th",[e._v("含义")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("lazy")]),e._v(" "),n("td",[e._v("是否延迟触发 "),n("code",[e._v("effect")])])]),e._v(" "),n("tr",[n("td",[e._v("computed")]),e._v(" "),n("td",[e._v("是否为计算属性")])]),e._v(" "),n("tr",[n("td",[e._v("scheduler")]),e._v(" "),n("td",[e._v("调度函数")])]),e._v(" "),n("tr",[n("td",[e._v("onTrack")]),e._v(" "),n("td",[e._v("追踪时触发")])]),e._v(" "),n("tr",[n("td",[e._v("onTrigger")]),e._v(" "),n("td",[e._v("触发回调时触发")])]),e._v(" "),n("tr",[n("td",[e._v("onStop")]),e._v(" "),n("td",[e._v("停止监听时触发")])])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export interface ReactiveEffectOptions {\n  lazy?: boolean\n  computed?: boolean\n  scheduler?: (job: ReactiveEffect) => void\n  onTrack?: (event: DebuggerEvent) => void\n  onTrigger?: (event: DebuggerEvent) => void\n  onStop?: () => void\n}\n")])])]),n("p",[e._v("分析完参数之后，继续我们一开始的分析。当我们调用 "),n("code",[e._v("effect")]),e._v(" 时，首先判断传入的 "),n("code",[e._v("fn")]),e._v(" 是否是 "),n("code",[e._v("effect")]),e._v("，如果是，取出原始值，然后调用 "),n("code",[e._v("createReactiveEffect")]),e._v(" 创建 新的"),n("code",[e._v("effect")]),e._v("， 如果传入的 "),n("code",[e._v("option")]),e._v(" 中的 "),n("code",[e._v("lazy")]),e._v(" 不为为 true，则立即调用我们刚刚创建的 "),n("code",[e._v("effect")]),e._v(", 最后返回刚刚创建的 "),n("code",[e._v("effect")]),e._v("。")]),e._v(" "),n("p",[e._v("那么 "),n("code",[e._v("createReactiveEffect")]),e._v(" 是怎样是创建 "),n("code",[e._v("effect")]),e._v("的呢？")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function createReactiveEffect<T = any>(\n  fn: (...args: any[]) => T,\n  options: ReactiveEffectOptions\n): ReactiveEffect<T> {\n  const effect = function reactiveEffect(...args: unknown[]): unknown {\n    if (!effect.active) {\n      return options.scheduler ? undefined : fn(...args)\n    }\n    if (!effectStack.includes(effect)) {\n      cleanup(effect)\n      try {\n        enableTracking()\n        effectStack.push(effect)\n        activeEffect = effect\n        return fn(...args)\n      } finally {\n        effectStack.pop()\n        resetTracking()\n        activeEffect = effectStack[effectStack.length - 1]\n      }\n    }\n  } as ReactiveEffect\n  effect.id = uid++\n  effect._isEffect = true\n  effect.active = true\n  effect.raw = fn\n  effect.deps = []\n  effect.options = options\n  return effect\n}\n")])])]),n("p",[e._v("我们先忽略 "),n("code",[e._v("reactiveEffect")]),e._v("，继续看下面的挂载的属性。")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("effect 挂载属性")]),e._v(" "),n("th",[e._v("含义")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("id")]),e._v(" "),n("td",[e._v("自增id， 唯一标识effect")])]),e._v(" "),n("tr",[n("td",[e._v("_isEffect")]),e._v(" "),n("td",[e._v("用于标识方法是否是effect")])]),e._v(" "),n("tr",[n("td",[e._v("active")]),e._v(" "),n("td",[e._v("effect 是否激活")])]),e._v(" "),n("tr",[n("td",[e._v("raw")]),e._v(" "),n("td",[e._v("创建effect是传入的fn")])]),e._v(" "),n("tr",[n("td",[e._v("deps")]),e._v(" "),n("td",[e._v("持有当前 effect 的dep 数组")])]),e._v(" "),n("tr",[n("td",[e._v("options")]),e._v(" "),n("td",[e._v("创建effect是传入的options")])])])]),e._v(" "),n("p",[e._v("回到 "),n("code",[e._v("reactiveEffect")]),e._v("，如果 effect 不是激活状态，这种情况发生在我们调用了 effect 中的 stop 方法之后，那么先前没有传入调用 scheduler 函数的话，直接调用原始方法fn，否则直接返回。")]),e._v(" "),n("p",[e._v("那么处于激活状态的 effect 要怎么进行处理呢？首先判断是否当前 effect 是否在 effectStack 当中，如果在，则不进行调用，这个主要是为了避免死循环。拿下面测试用例来看")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("it('should avoid infinite loops with other effects', () => {\n    const nums = reactive({ num1: 0, num2: 1 })\n\n    const spy1 = jest.fn(() => (nums.num1 = nums.num2))\n    const spy2 = jest.fn(() => (nums.num2 = nums.num1))\n    effect(spy1)\n    effect(spy2)\n    expect(nums.num1).toBe(1)\n    expect(nums.num2).toBe(1)\n    expect(spy1).toHaveBeenCalledTimes(1)\n    expect(spy2).toHaveBeenCalledTimes(1)\n    nums.num2 = 4\n    expect(nums.num1).toBe(4)\n    expect(nums.num2).toBe(4)\n    expect(spy1).toHaveBeenCalledTimes(2)\n    expect(spy2).toHaveBeenCalledTimes(2)\n    nums.num1 = 10\n    expect(nums.num1).toBe(10)\n    expect(nums.num2).toBe(10)\n    expect(spy1).toHaveBeenCalledTimes(3)\n    expect(spy2).toHaveBeenCalledTimes(3)\n})\n")])])]),n("p",[e._v("如果不加 effectStack，会导致 num2 改变，触发了 spy1, spy1 里面 num1 改变又触发了 spy2, spy2 又会改变 num2，从而触发了死循环。")]),e._v(" "),n("p",[e._v("接着是清除依赖，每次 effect 运行都会重新收集依赖, deps 是持有 effect 的依赖数组，其中里面的每个 dep 是对应对象某个 key 的 全部依赖，我们在这里需要做的就是首先把 effect 从 dep 中删除，最后把 deps 数组清空。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function cleanup(effect: ReactiveEffect) {\n  const { deps } = effect\n  if (deps.length) {\n    for (let i = 0; i < deps.length; i++) {\n      deps[i].delete(effect)\n    }\n    deps.length = 0\n  }\n}\n")])])]),n("p",[e._v("清除完依赖，就开始重新收集依赖。首先开启依赖收集，把当前 effect 放入 effectStack 中，然后讲 activeEffect 设置为当前的 effect，activeEffect 主要为了在收集依赖的时候使用（在下面会很快讲到），然后调用 fn 并且返回值，当这一切完成的时候，finally 阶段，会把当前 effect 弹出，恢复原来的收集依赖的状态，还有恢复原来的 activeEffect。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" try {\n    enableTracking()\n    effectStack.push(effect)\n    activeEffect = effect\n    return fn(...args)\n  } finally {\n    effectStack.pop()\n    resetTracking()\n    activeEffect = effectStack[effectStack.length - 1]\n  }\n")])])]),n("p",[e._v("那 effect 是怎么收集依赖的呢？vue3 利用 proxy 劫持对象，在上面运行 effect 中读取对象的时候，当前对象的 key 的依赖 set集合 会把 effect 收集进去。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export function track(target: object, type: TrackOpTypes, key: unknown) {\n  ...\n}\n")])])]),n("p",[e._v("vue3 在 reactive 中触发 track 函数，reactive 会在单独的章节讲。触发 track 的参数中，object 表示触发 track 的对象， type 代表触发 track 类型，而 key 则是 触发 track 的 object 的 key。在下面可以看到三种类型的读取对象会触发 track，分别是 get、 has、 iterate。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export const enum TrackOpTypes {\n  GET = 'get',\n  HAS = 'has',\n  ITERATE = 'iterate'\n}\n")])])]),n("p",[e._v("回到 track 内部，如果 shouldTrack 为 false 或者 activeEffect 为空，则不进行依赖收集。接着 targetMap 里面有没有该对象，没有新建 map，然后再看这个 map 有没有这个对象的对应 key 的 依赖 set 集合，没有则新建一个。 如果对象对应的 key 的 依赖 set 集合也没有当前 activeEffect， 则把 activeEffect 加到 set 里面，同时把 当前 set 塞到 activeEffect 的 deps 数组。最后如果是开发环境而且传入了 onTrack 函数，则触发 onTrack。\n所以 deps 就是 effect 中所依赖的 key 对应的 set 集合数组， 毕竟一般来说，effect 中不止依赖一个对象或者不止依赖一个对象的一个key，而且 一个对象可以能不止被一个 effect 使用，所以是 set 集合数组。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("if (!shouldTrack || activeEffect === undefined) {\n    return\n  }\n  let depsMap = targetMap.get(target)\n  if (!depsMap) {\n    targetMap.set(target, (depsMap = new Map()))\n  }\n  let dep = depsMap.get(key)\n  if (!dep) {\n    depsMap.set(key, (dep = new Set()))\n  }\n  if (!dep.has(activeEffect)) {\n    dep.add(activeEffect)\n    activeEffect.deps.push(dep)\n    if (__DEV__ && activeEffect.options.onTrack) {\n      activeEffect.options.onTrack({\n        effect: activeEffect,\n        target,\n        type,\n        key\n      })\n    }\n  }\n")])])]),n("p",[e._v("依赖都收集完毕了，接下来就是触发依赖。如果 targetMap 为空，说明这个对象没有被追踪，直接return。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export function trigger(\n  target: object,\n  type: TriggerOpTypes,\n  key?: unknown,\n  newValue?: unknown,\n  oldValue?: unknown,\n  oldTarget?: Map<unknown, unknown> | Set<unknown>\n) {\n  const depsMap = targetMap.get(target)\n  if (!depsMap) {\n    // never been tracked\n    return\n  }\n  ...\n}\n")])])]),n("p",[e._v("其中触发的 type, 包括了 set、add、delete 和 clear。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export const enum TriggerOpTypes {\n  SET = 'set',\n  ADD = 'add',\n  DELETE = 'delete',\n  CLEAR = 'clear'\n}\n")])])]),n("p",[e._v("接下来对 key 收集的依赖进行分组，computedRunners 具有更高的优先级，会触发下游的 effects 重新收集依赖，")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const effects = new Set<ReactiveEffect>()\nconst computedRunners = new Set<ReactiveEffect>()\n")])])]),n("p",[e._v("add 方法是将 effect 添加进不同分组的函数，其中 effect !== activeEffect 这个是为了避免死循环，在下面的注释也写的很清楚，避免出现 foo.value++ 这种情况。至于为什么是 set 呢，要避免 effect 多次运行。就好像循环中，set 触发了 trigger ，那么 ITERATE 和 当前 key 可能都属于同个 effect，这样就可以避免多次运行了。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const add = (effectsToAdd: Set<ReactiveEffect> | undefined) => {\nif (effectsToAdd) {\n  effectsToAdd.forEach(effect => {\n    if (effect !== activeEffect || !shouldTrack) {\n      if (effect.options.computed) {\n        computedRunners.add(effect)\n      } else {\n        effects.add(effect)\n      }\n    } else {\n      // the effect mutated its own dependency during its execution.\n      // this can be caused by operations like foo.value++\n      // do not trigger or we end in an infinite loop\n    }\n  })\n}\n}\n")])])]),n("p",[e._v("下面根据触发 key 类型的不同进行 effect 的处理。如果是 clear 类型，则触发这个对象所有的 effect。如果 key 是 length , 而且 target 是数组，则会触发 key 为 length 的 effects ，以及 key 大于等于新 length的 effects， 因为这些此时数组长度变化了。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("if (type === TriggerOpTypes.CLEAR) {\n    // collection being cleared\n    // trigger all effects for target\n    depsMap.forEach(add)\n} else if (key === 'length' && isArray(target)) {\n    depsMap.forEach((dep, key) => {\n      if (key === 'length' || key >= (newValue as number)) {\n        add(dep)\n      }\n    })\n} \n")])])]),n("p",[e._v("下面则是对正常的新增、修改、删除进行 effect 的分组, isAddOrDelete 表示新增 或者不是数组的删除，这为了对迭代 key的 effect 进行触发，如果 isAddOrDelete 为 true 或者是 map 对象的设值，则触发 isArray(target) ? 'length' : ITERATE_KEY 的 effect ，如果 isAddOrDelete 为 true 且 对象为 map， 则触发 MAP_KEY_ITERATE_KEY 的 effect")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("else {\n    // schedule runs for SET | ADD | DELETE\n    if (key !== void 0) {\n      add(depsMap.get(key))\n    }\n    // also run for iteration key on ADD | DELETE | Map.SET\n    const isAddOrDelete =\n      type === TriggerOpTypes.ADD ||\n      (type === TriggerOpTypes.DELETE && !isArray(target))\n    if (\n      isAddOrDelete ||\n      (type === TriggerOpTypes.SET && target instanceof Map)\n    ) {\n      add(depsMap.get(isArray(target) ? 'length' : ITERATE_KEY))\n    }\n    if (isAddOrDelete && target instanceof Map) {\n      add(depsMap.get(MAP_KEY_ITERATE_KEY))\n    }\n}\n")])])]),n("p",[e._v("最后是运行 effect， 像上面所说的，computed effects 会优先运行，因为 computed effects 在运行过程中，第一次会触发上游把cumputed effect收集进去，再把下游 effect 收集起来。")]),e._v(" "),n("p",[e._v("还有一点，就是 effect.options.scheduler，如果传入了调度函数，则通过 scheduler 函数去运行 effect， 但是 scheduler 里面可能不一定使用了 effect，例如 computed 里面，因为 computed 是延迟运行 effect， 这个会在讲 computed 的时候再讲。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const run = (effect: ReactiveEffect) => {\n    if (__DEV__ && effect.options.onTrigger) {\n      effect.options.onTrigger({\n        effect,\n        target,\n        key,\n        type,\n        newValue,\n        oldValue,\n        oldTarget\n      })\n    }\n    if (effect.options.scheduler) {\n      effect.options.scheduler(effect)\n    } else {\n      effect()\n    }\n}\n\n// Important: computed effects must be run first so that computed getters\n// can be invalidated before any normal effects that depend on them are run.\ncomputedRunners.forEach(run)\neffects.forEach(run)\n")])])]),n("p",[e._v("可以发现，不管是 track 还是 trigger， 都会导致 effect 重新运行去收集依赖。")]),e._v(" "),n("p",[e._v("最后再讲一个 stop 方法，当我们调用 stop 方法后，会清空其他对象对 effect 的依赖，同时调用 onStop 回调，最后将 effect 的激活状态设置为 false")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export function stop(effect: ReactiveEffect) {\n  if (effect.active) {\n    cleanup(effect)\n    if (effect.options.onStop) {\n      effect.options.onStop()\n    }\n    effect.active = false\n  }\n}\n\n")])])]),n("p",[e._v("这样当再一次调用 effect 的时候，不会进行依赖的重新收集，而且没有调度函数，就直接返回原始的 fn 的运行结果，否则直接返回 undefined。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("if (!effect.active) {\n  return options.scheduler ? undefined : fn(...args)\n}\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);